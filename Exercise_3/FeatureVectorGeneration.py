"""
This class is responsible for creating a set of feature vectors for each given image.
The feature vectors are generated by using the sliding window approach. Hence each image has multiple feature vectors
"""

import matplotlib.pyplot as plt
import numpy as np
from PIL import Image

height = 30
width = 120

def calculateFeatureVector(filename):
    img = loadAndResizeImg(filename)

    return getFeatureVector(img)


# loads and resizes the image to a smaller width, so less features are created.
def loadAndResizeImg(filename):
    img = Image.open(filename)
    img_resized = img.resize((int(img.width/(1.3*(img.height/height))), height))
    if img_resized.width > width:
        img_resized = img_resized.resize((width, height))

    G = np.full((height,width), True, dtype=bool)
    npImg = np.asarray(img_resized)

    # Set True for all white picels and false for all black pixels
    G[npImg > 0.5] = True  # white pixels
    G[npImg <= 0.5] = False  # black pixels

    return G


# Claculate the lower contur feature
def getLowerContur(column):
    for i in range(len(column)):
        if column[i] == False:
            return i
    return 0

#Calculate the upper contur feature
def getUpperContur(column):
    for i in reversed(range(len(column))):
        if column[i] == False:
            return i
    return height-1

# Get the # of BW transitions in the window
def getBWTransitions(column):
    counter = 0
    for i in range(len(column)-1):
        if column[i] != column[i+1]:
            counter = counter +1

    return counter


# Get the fraction of black pixels in the window
def getFractionOfBlackPxInWindow(column):
    counter = 0
    for i in range(len(column)):
        if column[i] == False:
            counter = counter +1

    return counter/len(column)

# Get the fraction of black pixels between the upper and lower contur
def getFractionOfBlackPxBtwLcAndUc(column, lc, uc):
    if lc == None or uc == None:
        return None
    counter = 0
    upperBound = uc + 1 if uc +1 <=height else height
    for i in range(lc,upperBound):
        if column[i] == False:
            counter = counter +1

    return counter/len(range(lc,upperBound))





# Calculate the different features according to Slides from Exercise 7 slides , slide 14
def calculateFeatures(column):
    features = []
    #Slides from Exercise 7 slides , slide 14
    features.append(getLowerContur(column))
    features.append(getUpperContur(column))
    features.append(getBWTransitions(column)/7)
    features.append(getFractionOfBlackPxInWindow(column))
    features.append(getFractionOfBlackPxBtwLcAndUc(column, features[0], features[1]))
    features[0] = float(features[0]/(height-1))
    features[1] = float(features[1]/(height-1))

    return features



def getFeatureVector(a):
    featureList = list()
    for i in range(width):
        featureList.append(calculateFeatures(a[:,i]))
    return featureList


